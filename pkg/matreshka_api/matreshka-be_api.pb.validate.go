// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/matreshka-be_api.proto

package matreshka_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppInfoMultiError, or nil if none found.
func (m *AppInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return AppInfoMultiError(errors)
	}

	return nil
}

// AppInfoMultiError is an error wrapping multiple validation errors returned
// by AppInfo.ValidateAll() if the designated constraints aren't met.
type AppInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInfoMultiError) AllErrors() []error { return m }

// AppInfoValidationError is the validation error returned by AppInfo.Validate
// if the designated constraints aren't met.
type AppInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInfoValidationError) ErrorName() string { return "AppInfoValidationError" }

// Error satisfies the builtin error interface
func (e AppInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInfoValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ApiVersion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiVersionMultiError, or
// nil if none found.
func (m *ApiVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiVersionMultiError(errors)
	}

	return nil
}

// ApiVersionMultiError is an error wrapping multiple validation errors
// returned by ApiVersion.ValidateAll() if the designated constraints aren't met.
type ApiVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersionMultiError) AllErrors() []error { return m }

// ApiVersionValidationError is the validation error returned by
// ApiVersion.Validate if the designated constraints aren't met.
type ApiVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersionValidationError) ErrorName() string { return "ApiVersionValidationError" }

// Error satisfies the builtin error interface
func (e ApiVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersionValidationError{}

// Validate checks the field values on GetConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetConfigMultiError, or nil
// if none found.
func (m *GetConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigMultiError(errors)
	}

	return nil
}

// GetConfigMultiError is an error wrapping multiple validation errors returned
// by GetConfig.ValidateAll() if the designated constraints aren't met.
type GetConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigMultiError) AllErrors() []error { return m }

// GetConfigValidationError is the validation error returned by
// GetConfig.Validate if the designated constraints aren't met.
type GetConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigValidationError) ErrorName() string { return "GetConfigValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigValidationError{}

// Validate checks the field values on PostConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostConfigMultiError, or
// nil if none found.
func (m *PostConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PostConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostConfigMultiError(errors)
	}

	return nil
}

// PostConfigMultiError is an error wrapping multiple validation errors
// returned by PostConfig.ValidateAll() if the designated constraints aren't met.
type PostConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostConfigMultiError) AllErrors() []error { return m }

// PostConfigValidationError is the validation error returned by
// PostConfig.Validate if the designated constraints aren't met.
type PostConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostConfigValidationError) ErrorName() string { return "PostConfigValidationError" }

// Error satisfies the builtin error interface
func (e PostConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostConfigValidationError{}

// Validate checks the field values on PatchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PatchConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PatchConfigMultiError, or
// nil if none found.
func (m *PatchConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfigMultiError(errors)
	}

	return nil
}

// PatchConfigMultiError is an error wrapping multiple validation errors
// returned by PatchConfig.ValidateAll() if the designated constraints aren't met.
type PatchConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigMultiError) AllErrors() []error { return m }

// PatchConfigValidationError is the validation error returned by
// PatchConfig.Validate if the designated constraints aren't met.
type PatchConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigValidationError) ErrorName() string { return "PatchConfigValidationError" }

// Error satisfies the builtin error interface
func (e PatchConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigValidationError{}

// Validate checks the field values on ListConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListConfigs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListConfigsMultiError, or
// nil if none found.
func (m *ListConfigs) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConfigsMultiError(errors)
	}

	return nil
}

// ListConfigsMultiError is an error wrapping multiple validation errors
// returned by ListConfigs.ValidateAll() if the designated constraints aren't met.
type ListConfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigsMultiError) AllErrors() []error { return m }

// ListConfigsValidationError is the validation error returned by
// ListConfigs.Validate if the designated constraints aren't met.
type ListConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigsValidationError) ErrorName() string { return "ListConfigsValidationError" }

// Error satisfies the builtin error interface
func (e ListConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigsValidationError{}

// Validate checks the field values on ApiVersion_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiVersion_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiVersion_RequestMultiError, or nil if none found.
func (m *ApiVersion_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiVersion_RequestMultiError(errors)
	}

	return nil
}

// ApiVersion_RequestMultiError is an error wrapping multiple validation errors
// returned by ApiVersion_Request.ValidateAll() if the designated constraints
// aren't met.
type ApiVersion_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersion_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersion_RequestMultiError) AllErrors() []error { return m }

// ApiVersion_RequestValidationError is the validation error returned by
// ApiVersion_Request.Validate if the designated constraints aren't met.
type ApiVersion_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersion_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersion_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersion_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersion_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersion_RequestValidationError) ErrorName() string {
	return "ApiVersion_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApiVersion_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersion_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersion_RequestValidationError{}

// Validate checks the field values on ApiVersion_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiVersion_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiVersion_ResponseMultiError, or nil if none found.
func (m *ApiVersion_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return ApiVersion_ResponseMultiError(errors)
	}

	return nil
}

// ApiVersion_ResponseMultiError is an error wrapping multiple validation
// errors returned by ApiVersion_Response.ValidateAll() if the designated
// constraints aren't met.
type ApiVersion_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersion_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersion_ResponseMultiError) AllErrors() []error { return m }

// ApiVersion_ResponseValidationError is the validation error returned by
// ApiVersion_Response.Validate if the designated constraints aren't met.
type ApiVersion_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersion_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersion_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersion_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersion_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersion_ResponseValidationError) ErrorName() string {
	return "ApiVersion_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApiVersion_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersion_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersion_ResponseValidationError{}

// Validate checks the field values on GetConfig_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfig_RequestMultiError, or nil if none found.
func (m *GetConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return GetConfig_RequestMultiError(errors)
	}

	return nil
}

// GetConfig_RequestMultiError is an error wrapping multiple validation errors
// returned by GetConfig_Request.ValidateAll() if the designated constraints
// aren't met.
type GetConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfig_RequestMultiError) AllErrors() []error { return m }

// GetConfig_RequestValidationError is the validation error returned by
// GetConfig_Request.Validate if the designated constraints aren't met.
type GetConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfig_RequestValidationError) ErrorName() string {
	return "GetConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfig_RequestValidationError{}

// Validate checks the field values on GetConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfig_ResponseMultiError, or nil if none found.
func (m *GetConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return GetConfig_ResponseMultiError(errors)
	}

	return nil
}

// GetConfig_ResponseMultiError is an error wrapping multiple validation errors
// returned by GetConfig_Response.ValidateAll() if the designated constraints
// aren't met.
type GetConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfig_ResponseMultiError) AllErrors() []error { return m }

// GetConfig_ResponseValidationError is the validation error returned by
// GetConfig_Response.Validate if the designated constraints aren't met.
type GetConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfig_ResponseValidationError) ErrorName() string {
	return "GetConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfig_ResponseValidationError{}

// Validate checks the field values on PostConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostConfig_RequestMultiError, or nil if none found.
func (m *PostConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PostConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return PostConfig_RequestMultiError(errors)
	}

	return nil
}

// PostConfig_RequestMultiError is an error wrapping multiple validation errors
// returned by PostConfig_Request.ValidateAll() if the designated constraints
// aren't met.
type PostConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostConfig_RequestMultiError) AllErrors() []error { return m }

// PostConfig_RequestValidationError is the validation error returned by
// PostConfig_Request.Validate if the designated constraints aren't met.
type PostConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostConfig_RequestValidationError) ErrorName() string {
	return "PostConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostConfig_RequestValidationError{}

// Validate checks the field values on PostConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostConfig_ResponseMultiError, or nil if none found.
func (m *PostConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PostConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostConfig_ResponseMultiError(errors)
	}

	return nil
}

// PostConfig_ResponseMultiError is an error wrapping multiple validation
// errors returned by PostConfig_Response.ValidateAll() if the designated
// constraints aren't met.
type PostConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostConfig_ResponseMultiError) AllErrors() []error { return m }

// PostConfig_ResponseValidationError is the validation error returned by
// PostConfig_Response.Validate if the designated constraints aren't met.
type PostConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostConfig_ResponseValidationError) ErrorName() string {
	return "PostConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostConfig_ResponseValidationError{}

// Validate checks the field values on PatchConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfig_RequestMultiError, or nil if none found.
func (m *PatchConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for PathToValue

	if len(errors) > 0 {
		return PatchConfig_RequestMultiError(errors)
	}

	return nil
}

// PatchConfig_RequestMultiError is an error wrapping multiple validation
// errors returned by PatchConfig_Request.ValidateAll() if the designated
// constraints aren't met.
type PatchConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfig_RequestMultiError) AllErrors() []error { return m }

// PatchConfig_RequestValidationError is the validation error returned by
// PatchConfig_Request.Validate if the designated constraints aren't met.
type PatchConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfig_RequestValidationError) ErrorName() string {
	return "PatchConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfig_RequestValidationError{}

// Validate checks the field values on PatchConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfig_ResponseMultiError, or nil if none found.
func (m *PatchConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfig_ResponseMultiError(errors)
	}

	return nil
}

// PatchConfig_ResponseMultiError is an error wrapping multiple validation
// errors returned by PatchConfig_Response.ValidateAll() if the designated
// constraints aren't met.
type PatchConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfig_ResponseMultiError) AllErrors() []error { return m }

// PatchConfig_ResponseValidationError is the validation error returned by
// PatchConfig_Response.Validate if the designated constraints aren't met.
type PatchConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfig_ResponseValidationError) ErrorName() string {
	return "PatchConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfig_ResponseValidationError{}

// Validate checks the field values on ListConfigs_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigs_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigs_RequestMultiError, or nil if none found.
func (m *ListConfigs_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListConfigs_RequestValidationError{
					field:  "ListRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListConfigs_RequestValidationError{
					field:  "ListRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListConfigs_RequestValidationError{
				field:  "ListRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchPattern

	if len(errors) > 0 {
		return ListConfigs_RequestMultiError(errors)
	}

	return nil
}

// ListConfigs_RequestMultiError is an error wrapping multiple validation
// errors returned by ListConfigs_Request.ValidateAll() if the designated
// constraints aren't met.
type ListConfigs_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigs_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigs_RequestMultiError) AllErrors() []error { return m }

// ListConfigs_RequestValidationError is the validation error returned by
// ListConfigs_Request.Validate if the designated constraints aren't met.
type ListConfigs_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigs_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigs_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigs_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigs_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigs_RequestValidationError) ErrorName() string {
	return "ListConfigs_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigs_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigs_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigs_RequestValidationError{}

// Validate checks the field values on ListConfigs_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigs_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigs_ResponseMultiError, or nil if none found.
func (m *ListConfigs_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfigs_ResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfigs_ResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigs_ResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConfigs_ResponseMultiError(errors)
	}

	return nil
}

// ListConfigs_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfigs_Response.ValidateAll() if the designated
// constraints aren't met.
type ListConfigs_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigs_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigs_ResponseMultiError) AllErrors() []error { return m }

// ListConfigs_ResponseValidationError is the validation error returned by
// ListConfigs_Response.Validate if the designated constraints aren't met.
type ListConfigs_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigs_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigs_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigs_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigs_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigs_ResponseValidationError) ErrorName() string {
	return "ListConfigs_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigs_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigs_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigs_ResponseValidationError{}
