// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/matreshka-be_api.proto

package matreshka_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApiVersion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiVersionMultiError, or
// nil if none found.
func (m *ApiVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiVersionMultiError(errors)
	}

	return nil
}

// ApiVersionMultiError is an error wrapping multiple validation errors
// returned by ApiVersion.ValidateAll() if the designated constraints aren't met.
type ApiVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersionMultiError) AllErrors() []error { return m }

// ApiVersionValidationError is the validation error returned by
// ApiVersion.Validate if the designated constraints aren't met.
type ApiVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersionValidationError) ErrorName() string { return "ApiVersionValidationError" }

// Error satisfies the builtin error interface
func (e ApiVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersionValidationError{}

// Validate checks the field values on UpdateServiceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceConfigMultiError, or nil if none found.
func (m *UpdateServiceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServiceConfigMultiError(errors)
	}

	return nil
}

// UpdateServiceConfigMultiError is an error wrapping multiple validation
// errors returned by UpdateServiceConfig.ValidateAll() if the designated
// constraints aren't met.
type UpdateServiceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceConfigMultiError) AllErrors() []error { return m }

// UpdateServiceConfigValidationError is the validation error returned by
// UpdateServiceConfig.Validate if the designated constraints aren't met.
type UpdateServiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceConfigValidationError) ErrorName() string {
	return "UpdateServiceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceConfigValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAppConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "AppConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "AppConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "AppConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetApi() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Api[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Api[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Api[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnvironment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Environment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Environment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Environment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on GetConfigRaw with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConfigRaw) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRaw with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetConfigRawMultiError, or
// nil if none found.
func (m *GetConfigRaw) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRaw) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigRawMultiError(errors)
	}

	return nil
}

// GetConfigRawMultiError is an error wrapping multiple validation errors
// returned by GetConfigRaw.ValidateAll() if the designated constraints aren't met.
type GetConfigRawMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRawMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRawMultiError) AllErrors() []error { return m }

// GetConfigRawValidationError is the validation error returned by
// GetConfigRaw.Validate if the designated constraints aren't met.
type GetConfigRawValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRawValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRawValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRawValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRawValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRawValidationError) ErrorName() string { return "GetConfigRawValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRawValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRaw.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRawValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRawValidationError{}

// Validate checks the field values on GetConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetConfigMultiError, or nil
// if none found.
func (m *GetConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigMultiError(errors)
	}

	return nil
}

// GetConfigMultiError is an error wrapping multiple validation errors returned
// by GetConfig.ValidateAll() if the designated constraints aren't met.
type GetConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigMultiError) AllErrors() []error { return m }

// GetConfigValidationError is the validation error returned by
// GetConfig.Validate if the designated constraints aren't met.
type GetConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigValidationError) ErrorName() string { return "GetConfigValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigValidationError{}

// Validate checks the field values on PatchConfigEnv with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PatchConfigEnv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigEnv with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PatchConfigEnvMultiError,
// or nil if none found.
func (m *PatchConfigEnv) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigEnv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfigEnvMultiError(errors)
	}

	return nil
}

// PatchConfigEnvMultiError is an error wrapping multiple validation errors
// returned by PatchConfigEnv.ValidateAll() if the designated constraints
// aren't met.
type PatchConfigEnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigEnvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigEnvMultiError) AllErrors() []error { return m }

// PatchConfigEnvValidationError is the validation error returned by
// PatchConfigEnv.Validate if the designated constraints aren't met.
type PatchConfigEnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigEnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigEnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigEnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigEnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigEnvValidationError) ErrorName() string { return "PatchConfigEnvValidationError" }

// Error satisfies the builtin error interface
func (e PatchConfigEnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigEnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigEnvValidationError{}

// Validate checks the field values on PatchConfigRaw with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PatchConfigRaw) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigRaw with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PatchConfigRawMultiError,
// or nil if none found.
func (m *PatchConfigRaw) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigRaw) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfigRawMultiError(errors)
	}

	return nil
}

// PatchConfigRawMultiError is an error wrapping multiple validation errors
// returned by PatchConfigRaw.ValidateAll() if the designated constraints
// aren't met.
type PatchConfigRawMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigRawMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigRawMultiError) AllErrors() []error { return m }

// PatchConfigRawValidationError is the validation error returned by
// PatchConfigRaw.Validate if the designated constraints aren't met.
type PatchConfigRawValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigRawValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigRawValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigRawValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigRawValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigRawValidationError) ErrorName() string { return "PatchConfigRawValidationError" }

// Error satisfies the builtin error interface
func (e PatchConfigRawValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigRaw.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigRawValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigRawValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListConfigs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListConfigsMultiError, or
// nil if none found.
func (m *ListConfigs) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConfigsMultiError(errors)
	}

	return nil
}

// ListConfigsMultiError is an error wrapping multiple validation errors
// returned by ListConfigs.ValidateAll() if the designated constraints aren't met.
type ListConfigsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigsMultiError) AllErrors() []error { return m }

// ListConfigsValidationError is the validation error returned by
// ListConfigs.Validate if the designated constraints aren't met.
type ListConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigsValidationError) ErrorName() string { return "ListConfigsValidationError" }

// Error satisfies the builtin error interface
func (e ListConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigsValidationError{}

// Validate checks the field values on ApiVersion_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiVersion_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiVersion_RequestMultiError, or nil if none found.
func (m *ApiVersion_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiVersion_RequestMultiError(errors)
	}

	return nil
}

// ApiVersion_RequestMultiError is an error wrapping multiple validation errors
// returned by ApiVersion_Request.ValidateAll() if the designated constraints
// aren't met.
type ApiVersion_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersion_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersion_RequestMultiError) AllErrors() []error { return m }

// ApiVersion_RequestValidationError is the validation error returned by
// ApiVersion_Request.Validate if the designated constraints aren't met.
type ApiVersion_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersion_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersion_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersion_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersion_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersion_RequestValidationError) ErrorName() string {
	return "ApiVersion_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApiVersion_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersion_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersion_RequestValidationError{}

// Validate checks the field values on ApiVersion_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiVersion_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiVersion_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiVersion_ResponseMultiError, or nil if none found.
func (m *ApiVersion_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiVersion_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return ApiVersion_ResponseMultiError(errors)
	}

	return nil
}

// ApiVersion_ResponseMultiError is an error wrapping multiple validation
// errors returned by ApiVersion_Response.ValidateAll() if the designated
// constraints aren't met.
type ApiVersion_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiVersion_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiVersion_ResponseMultiError) AllErrors() []error { return m }

// ApiVersion_ResponseValidationError is the validation error returned by
// ApiVersion_Response.Validate if the designated constraints aren't met.
type ApiVersion_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiVersion_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiVersion_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiVersion_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiVersion_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiVersion_ResponseValidationError) ErrorName() string {
	return "ApiVersion_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApiVersion_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiVersion_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiVersion_ResponseValidationError{}

// Validate checks the field values on UpdateServiceConfig_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceConfig_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceConfig_RequestMultiError, or nil if none found.
func (m *UpdateServiceConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateServiceConfig_RequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateServiceConfig_RequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceConfig_RequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateServiceConfig_RequestMultiError(errors)
	}

	return nil
}

// UpdateServiceConfig_RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceConfig_Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceConfig_RequestMultiError) AllErrors() []error { return m }

// UpdateServiceConfig_RequestValidationError is the validation error returned
// by UpdateServiceConfig_Request.Validate if the designated constraints
// aren't met.
type UpdateServiceConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceConfig_RequestValidationError) ErrorName() string {
	return "UpdateServiceConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceConfig_RequestValidationError{}

// Validate checks the field values on UpdateServiceConfig_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceConfig_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceConfig_ResponseMultiError, or nil if none found.
func (m *UpdateServiceConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return UpdateServiceConfig_ResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceConfig_ResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceConfig_Response.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceConfig_ResponseMultiError) AllErrors() []error { return m }

// UpdateServiceConfig_ResponseValidationError is the validation error returned
// by UpdateServiceConfig_Response.Validate if the designated constraints
// aren't met.
type UpdateServiceConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceConfig_ResponseValidationError) ErrorName() string {
	return "UpdateServiceConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceConfig_ResponseValidationError{}

// Validate checks the field values on Config_AppConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Config_AppConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config_AppConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Config_AppConfigMultiError, or nil if none found.
func (m *Config_AppConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_AppConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for StartupDuration

	if len(errors) > 0 {
		return Config_AppConfigMultiError(errors)
	}

	return nil
}

// Config_AppConfigMultiError is an error wrapping multiple validation errors
// returned by Config_AppConfig.ValidateAll() if the designated constraints
// aren't met.
type Config_AppConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_AppConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_AppConfigMultiError) AllErrors() []error { return m }

// Config_AppConfigValidationError is the validation error returned by
// Config_AppConfig.Validate if the designated constraints aren't met.
type Config_AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_AppConfigValidationError) ErrorName() string { return "Config_AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e Config_AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_AppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_AppConfigValidationError{}

// Validate checks the field values on Config_Resource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Config_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config_Resource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Config_ResourceMultiError, or nil if none found.
func (m *Config_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for ConnectionString

	if len(errors) > 0 {
		return Config_ResourceMultiError(errors)
	}

	return nil
}

// Config_ResourceMultiError is an error wrapping multiple validation errors
// returned by Config_Resource.ValidateAll() if the designated constraints
// aren't met.
type Config_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_ResourceMultiError) AllErrors() []error { return m }

// Config_ResourceValidationError is the validation error returned by
// Config_Resource.Validate if the designated constraints aren't met.
type Config_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_ResourceValidationError) ErrorName() string { return "Config_ResourceValidationError" }

// Error satisfies the builtin error interface
func (e Config_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_ResourceValidationError{}

// Validate checks the field values on Config_Api with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config_Api) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config_Api with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Config_ApiMultiError, or
// nil if none found.
func (m *Config_Api) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_Api) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiType

	// no validation rules for SwaggerLink

	// no validation rules for MakoshName

	if len(errors) > 0 {
		return Config_ApiMultiError(errors)
	}

	return nil
}

// Config_ApiMultiError is an error wrapping multiple validation errors
// returned by Config_Api.ValidateAll() if the designated constraints aren't met.
type Config_ApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_ApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_ApiMultiError) AllErrors() []error { return m }

// Config_ApiValidationError is the validation error returned by
// Config_Api.Validate if the designated constraints aren't met.
type Config_ApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_ApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_ApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_ApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_ApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_ApiValidationError) ErrorName() string { return "Config_ApiValidationError" }

// Error satisfies the builtin error interface
func (e Config_ApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_Api.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_ApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_ApiValidationError{}

// Validate checks the field values on Config_Environment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Config_Environment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config_Environment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Config_EnvironmentMultiError, or nil if none found.
func (m *Config_Environment) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_Environment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return Config_EnvironmentMultiError(errors)
	}

	return nil
}

// Config_EnvironmentMultiError is an error wrapping multiple validation errors
// returned by Config_Environment.ValidateAll() if the designated constraints
// aren't met.
type Config_EnvironmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_EnvironmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_EnvironmentMultiError) AllErrors() []error { return m }

// Config_EnvironmentValidationError is the validation error returned by
// Config_Environment.Validate if the designated constraints aren't met.
type Config_EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_EnvironmentValidationError) ErrorName() string {
	return "Config_EnvironmentValidationError"
}

// Error satisfies the builtin error interface
func (e Config_EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_Environment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_EnvironmentValidationError{}

// Validate checks the field values on GetConfigRaw_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRaw_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRaw_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRaw_RequestMultiError, or nil if none found.
func (m *GetConfigRaw_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRaw_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return GetConfigRaw_RequestMultiError(errors)
	}

	return nil
}

// GetConfigRaw_RequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigRaw_Request.ValidateAll() if the designated
// constraints aren't met.
type GetConfigRaw_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRaw_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRaw_RequestMultiError) AllErrors() []error { return m }

// GetConfigRaw_RequestValidationError is the validation error returned by
// GetConfigRaw_Request.Validate if the designated constraints aren't met.
type GetConfigRaw_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRaw_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRaw_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRaw_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRaw_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRaw_RequestValidationError) ErrorName() string {
	return "GetConfigRaw_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigRaw_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRaw_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRaw_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRaw_RequestValidationError{}

// Validate checks the field values on GetConfigRaw_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRaw_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRaw_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRaw_ResponseMultiError, or nil if none found.
func (m *GetConfigRaw_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRaw_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return GetConfigRaw_ResponseMultiError(errors)
	}

	return nil
}

// GetConfigRaw_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigRaw_Response.ValidateAll() if the designated
// constraints aren't met.
type GetConfigRaw_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRaw_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRaw_ResponseMultiError) AllErrors() []error { return m }

// GetConfigRaw_ResponseValidationError is the validation error returned by
// GetConfigRaw_Response.Validate if the designated constraints aren't met.
type GetConfigRaw_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRaw_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRaw_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRaw_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRaw_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRaw_ResponseValidationError) ErrorName() string {
	return "GetConfigRaw_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigRaw_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRaw_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRaw_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRaw_ResponseValidationError{}

// Validate checks the field values on GetConfig_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfig_RequestMultiError, or nil if none found.
func (m *GetConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return GetConfig_RequestMultiError(errors)
	}

	return nil
}

// GetConfig_RequestMultiError is an error wrapping multiple validation errors
// returned by GetConfig_Request.ValidateAll() if the designated constraints
// aren't met.
type GetConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfig_RequestMultiError) AllErrors() []error { return m }

// GetConfig_RequestValidationError is the validation error returned by
// GetConfig_Request.Validate if the designated constraints aren't met.
type GetConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfig_RequestValidationError) ErrorName() string {
	return "GetConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfig_RequestValidationError{}

// Validate checks the field values on GetConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfig_ResponseMultiError, or nil if none found.
func (m *GetConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConfig_ResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConfig_ResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConfig_ResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConfig_ResponseMultiError(errors)
	}

	return nil
}

// GetConfig_ResponseMultiError is an error wrapping multiple validation errors
// returned by GetConfig_Response.ValidateAll() if the designated constraints
// aren't met.
type GetConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfig_ResponseMultiError) AllErrors() []error { return m }

// GetConfig_ResponseValidationError is the validation error returned by
// GetConfig_Response.Validate if the designated constraints aren't met.
type GetConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfig_ResponseValidationError) ErrorName() string {
	return "GetConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfig_ResponseValidationError{}

// Validate checks the field values on PatchConfigEnv_Patch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfigEnv_Patch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigEnv_Patch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfigEnv_PatchMultiError, or nil if none found.
func (m *PatchConfigEnv_Patch) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigEnv_Patch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FieldName

	// no validation rules for Value

	if len(errors) > 0 {
		return PatchConfigEnv_PatchMultiError(errors)
	}

	return nil
}

// PatchConfigEnv_PatchMultiError is an error wrapping multiple validation
// errors returned by PatchConfigEnv_Patch.ValidateAll() if the designated
// constraints aren't met.
type PatchConfigEnv_PatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigEnv_PatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigEnv_PatchMultiError) AllErrors() []error { return m }

// PatchConfigEnv_PatchValidationError is the validation error returned by
// PatchConfigEnv_Patch.Validate if the designated constraints aren't met.
type PatchConfigEnv_PatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigEnv_PatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigEnv_PatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigEnv_PatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigEnv_PatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigEnv_PatchValidationError) ErrorName() string {
	return "PatchConfigEnv_PatchValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfigEnv_PatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigEnv_Patch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigEnv_PatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigEnv_PatchValidationError{}

// Validate checks the field values on PatchConfigEnv_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfigEnv_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigEnv_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfigEnv_RequestMultiError, or nil if none found.
func (m *PatchConfigEnv_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigEnv_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	for idx, item := range m.GetPatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchConfigEnv_RequestValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchConfigEnv_RequestValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchConfigEnv_RequestValidationError{
					field:  fmt.Sprintf("Patches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PatchConfigEnv_RequestMultiError(errors)
	}

	return nil
}

// PatchConfigEnv_RequestMultiError is an error wrapping multiple validation
// errors returned by PatchConfigEnv_Request.ValidateAll() if the designated
// constraints aren't met.
type PatchConfigEnv_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigEnv_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigEnv_RequestMultiError) AllErrors() []error { return m }

// PatchConfigEnv_RequestValidationError is the validation error returned by
// PatchConfigEnv_Request.Validate if the designated constraints aren't met.
type PatchConfigEnv_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigEnv_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigEnv_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigEnv_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigEnv_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigEnv_RequestValidationError) ErrorName() string {
	return "PatchConfigEnv_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfigEnv_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigEnv_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigEnv_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigEnv_RequestValidationError{}

// Validate checks the field values on PatchConfigEnv_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfigEnv_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigEnv_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfigEnv_ResponseMultiError, or nil if none found.
func (m *PatchConfigEnv_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigEnv_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfigEnv_ResponseMultiError(errors)
	}

	return nil
}

// PatchConfigEnv_ResponseMultiError is an error wrapping multiple validation
// errors returned by PatchConfigEnv_Response.ValidateAll() if the designated
// constraints aren't met.
type PatchConfigEnv_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigEnv_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigEnv_ResponseMultiError) AllErrors() []error { return m }

// PatchConfigEnv_ResponseValidationError is the validation error returned by
// PatchConfigEnv_Response.Validate if the designated constraints aren't met.
type PatchConfigEnv_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigEnv_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigEnv_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigEnv_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigEnv_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigEnv_ResponseValidationError) ErrorName() string {
	return "PatchConfigEnv_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfigEnv_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigEnv_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigEnv_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigEnv_ResponseValidationError{}

// Validate checks the field values on PatchConfigRaw_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfigRaw_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigRaw_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfigRaw_RequestMultiError, or nil if none found.
func (m *PatchConfigRaw_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigRaw_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Raw

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return PatchConfigRaw_RequestMultiError(errors)
	}

	return nil
}

// PatchConfigRaw_RequestMultiError is an error wrapping multiple validation
// errors returned by PatchConfigRaw_Request.ValidateAll() if the designated
// constraints aren't met.
type PatchConfigRaw_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigRaw_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigRaw_RequestMultiError) AllErrors() []error { return m }

// PatchConfigRaw_RequestValidationError is the validation error returned by
// PatchConfigRaw_Request.Validate if the designated constraints aren't met.
type PatchConfigRaw_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigRaw_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigRaw_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigRaw_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigRaw_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigRaw_RequestValidationError) ErrorName() string {
	return "PatchConfigRaw_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfigRaw_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigRaw_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigRaw_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigRaw_RequestValidationError{}

// Validate checks the field values on PatchConfigRaw_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchConfigRaw_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchConfigRaw_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchConfigRaw_ResponseMultiError, or nil if none found.
func (m *PatchConfigRaw_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchConfigRaw_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchConfigRaw_ResponseMultiError(errors)
	}

	return nil
}

// PatchConfigRaw_ResponseMultiError is an error wrapping multiple validation
// errors returned by PatchConfigRaw_Response.ValidateAll() if the designated
// constraints aren't met.
type PatchConfigRaw_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchConfigRaw_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchConfigRaw_ResponseMultiError) AllErrors() []error { return m }

// PatchConfigRaw_ResponseValidationError is the validation error returned by
// PatchConfigRaw_Response.Validate if the designated constraints aren't met.
type PatchConfigRaw_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchConfigRaw_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchConfigRaw_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchConfigRaw_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchConfigRaw_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchConfigRaw_ResponseValidationError) ErrorName() string {
	return "PatchConfigRaw_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchConfigRaw_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchConfigRaw_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchConfigRaw_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchConfigRaw_ResponseValidationError{}

// Validate checks the field values on ListConfigs_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigs_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigs_RequestMultiError, or nil if none found.
func (m *ListConfigs_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListConfigs_RequestValidationError{
					field:  "ListRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListConfigs_RequestValidationError{
					field:  "ListRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListConfigs_RequestValidationError{
				field:  "ListRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ServiceName != nil {
		// no validation rules for ServiceName
	}

	if len(errors) > 0 {
		return ListConfigs_RequestMultiError(errors)
	}

	return nil
}

// ListConfigs_RequestMultiError is an error wrapping multiple validation
// errors returned by ListConfigs_Request.ValidateAll() if the designated
// constraints aren't met.
type ListConfigs_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigs_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigs_RequestMultiError) AllErrors() []error { return m }

// ListConfigs_RequestValidationError is the validation error returned by
// ListConfigs_Request.Validate if the designated constraints aren't met.
type ListConfigs_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigs_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigs_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigs_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigs_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigs_RequestValidationError) ErrorName() string {
	return "ListConfigs_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigs_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigs_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigs_RequestValidationError{}

// Validate checks the field values on ListConfigs_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigs_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigs_ResponseMultiError, or nil if none found.
func (m *ListConfigs_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfigs_ResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfigs_ResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigs_ResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConfigs_ResponseMultiError(errors)
	}

	return nil
}

// ListConfigs_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfigs_Response.ValidateAll() if the designated
// constraints aren't met.
type ListConfigs_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigs_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigs_ResponseMultiError) AllErrors() []error { return m }

// ListConfigs_ResponseValidationError is the validation error returned by
// ListConfigs_Response.Validate if the designated constraints aren't met.
type ListConfigs_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigs_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigs_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigs_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigs_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigs_ResponseValidationError) ErrorName() string {
	return "ListConfigs_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigs_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigs_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigs_ResponseValidationError{}

// Validate checks the field values on ListConfigs_Response_ServiceInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListConfigs_Response_ServiceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigs_Response_ServiceInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListConfigs_Response_ServiceInfoMultiError, or nil if none found.
func (m *ListConfigs_Response_ServiceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigs_Response_ServiceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ListConfigs_Response_ServiceInfoMultiError(errors)
	}

	return nil
}

// ListConfigs_Response_ServiceInfoMultiError is an error wrapping multiple
// validation errors returned by
// ListConfigs_Response_ServiceInfo.ValidateAll() if the designated
// constraints aren't met.
type ListConfigs_Response_ServiceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigs_Response_ServiceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigs_Response_ServiceInfoMultiError) AllErrors() []error { return m }

// ListConfigs_Response_ServiceInfoValidationError is the validation error
// returned by ListConfigs_Response_ServiceInfo.Validate if the designated
// constraints aren't met.
type ListConfigs_Response_ServiceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigs_Response_ServiceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigs_Response_ServiceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigs_Response_ServiceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigs_Response_ServiceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigs_Response_ServiceInfoValidationError) ErrorName() string {
	return "ListConfigs_Response_ServiceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigs_Response_ServiceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigs_Response_ServiceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigs_Response_ServiceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigs_Response_ServiceInfoValidationError{}
