// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: api/grpc/matreshka-be_api.proto

package matreshka_be_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatreshkaBeAPI_ApiVersion_FullMethodName         = "/matreshka_be_api.MatreshkaBeAPI/ApiVersion"
	MatreshkaBeAPI_GetConfig_FullMethodName          = "/matreshka_be_api.MatreshkaBeAPI/GetConfig"
	MatreshkaBeAPI_GetConfigNodes_FullMethodName     = "/matreshka_be_api.MatreshkaBeAPI/GetConfigNodes"
	MatreshkaBeAPI_ListConfigs_FullMethodName        = "/matreshka_be_api.MatreshkaBeAPI/ListConfigs"
	MatreshkaBeAPI_CreateConfig_FullMethodName       = "/matreshka_be_api.MatreshkaBeAPI/CreateConfig"
	MatreshkaBeAPI_PatchConfig_FullMethodName        = "/matreshka_be_api.MatreshkaBeAPI/PatchConfig"
	MatreshkaBeAPI_RenameConfig_FullMethodName       = "/matreshka_be_api.MatreshkaBeAPI/RenameConfig"
	MatreshkaBeAPI_SubscribeOnChanges_FullMethodName = "/matreshka_be_api.MatreshkaBeAPI/SubscribeOnChanges"
)

// MatreshkaBeAPIClient is the client API for MatreshkaBeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatreshkaBeAPIClient interface {
	ApiVersion(ctx context.Context, in *ApiVersion_Request, opts ...grpc.CallOption) (*ApiVersion_Response, error)
	GetConfig(ctx context.Context, in *GetConfig_Request, opts ...grpc.CallOption) (*GetConfig_Response, error)
	GetConfigNodes(ctx context.Context, in *GetConfigNode_Request, opts ...grpc.CallOption) (*GetConfigNode_Response, error)
	ListConfigs(ctx context.Context, in *ListConfigs_Request, opts ...grpc.CallOption) (*ListConfigs_Response, error)
	CreateConfig(ctx context.Context, in *CreateConfig_Request, opts ...grpc.CallOption) (*CreateConfig_Response, error)
	PatchConfig(ctx context.Context, in *PatchConfig_Request, opts ...grpc.CallOption) (*PatchConfig_Response, error)
	RenameConfig(ctx context.Context, in *RenameConfig_Request, opts ...grpc.CallOption) (*RenameConfig_Response, error)
	SubscribeOnChanges(ctx context.Context, opts ...grpc.CallOption) (MatreshkaBeAPI_SubscribeOnChangesClient, error)
}

type matreshkaBeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMatreshkaBeAPIClient(cc grpc.ClientConnInterface) MatreshkaBeAPIClient {
	return &matreshkaBeAPIClient{cc}
}

func (c *matreshkaBeAPIClient) ApiVersion(ctx context.Context, in *ApiVersion_Request, opts ...grpc.CallOption) (*ApiVersion_Response, error) {
	out := new(ApiVersion_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_ApiVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) GetConfig(ctx context.Context, in *GetConfig_Request, opts ...grpc.CallOption) (*GetConfig_Response, error) {
	out := new(GetConfig_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) GetConfigNodes(ctx context.Context, in *GetConfigNode_Request, opts ...grpc.CallOption) (*GetConfigNode_Response, error) {
	out := new(GetConfigNode_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_GetConfigNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) ListConfigs(ctx context.Context, in *ListConfigs_Request, opts ...grpc.CallOption) (*ListConfigs_Response, error) {
	out := new(ListConfigs_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_ListConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) CreateConfig(ctx context.Context, in *CreateConfig_Request, opts ...grpc.CallOption) (*CreateConfig_Response, error) {
	out := new(CreateConfig_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_CreateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) PatchConfig(ctx context.Context, in *PatchConfig_Request, opts ...grpc.CallOption) (*PatchConfig_Response, error) {
	out := new(PatchConfig_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_PatchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) RenameConfig(ctx context.Context, in *RenameConfig_Request, opts ...grpc.CallOption) (*RenameConfig_Response, error) {
	out := new(RenameConfig_Response)
	err := c.cc.Invoke(ctx, MatreshkaBeAPI_RenameConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matreshkaBeAPIClient) SubscribeOnChanges(ctx context.Context, opts ...grpc.CallOption) (MatreshkaBeAPI_SubscribeOnChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatreshkaBeAPI_ServiceDesc.Streams[0], MatreshkaBeAPI_SubscribeOnChanges_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &matreshkaBeAPISubscribeOnChangesClient{stream}
	return x, nil
}

type MatreshkaBeAPI_SubscribeOnChangesClient interface {
	Send(*SubscribeOnChanges_Request) error
	Recv() (*SubscribeOnChanges_Response, error)
	grpc.ClientStream
}

type matreshkaBeAPISubscribeOnChangesClient struct {
	grpc.ClientStream
}

func (x *matreshkaBeAPISubscribeOnChangesClient) Send(m *SubscribeOnChanges_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matreshkaBeAPISubscribeOnChangesClient) Recv() (*SubscribeOnChanges_Response, error) {
	m := new(SubscribeOnChanges_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatreshkaBeAPIServer is the server API for MatreshkaBeAPI service.
// All implementations must embed UnimplementedMatreshkaBeAPIServer
// for forward compatibility
type MatreshkaBeAPIServer interface {
	ApiVersion(context.Context, *ApiVersion_Request) (*ApiVersion_Response, error)
	GetConfig(context.Context, *GetConfig_Request) (*GetConfig_Response, error)
	GetConfigNodes(context.Context, *GetConfigNode_Request) (*GetConfigNode_Response, error)
	ListConfigs(context.Context, *ListConfigs_Request) (*ListConfigs_Response, error)
	CreateConfig(context.Context, *CreateConfig_Request) (*CreateConfig_Response, error)
	PatchConfig(context.Context, *PatchConfig_Request) (*PatchConfig_Response, error)
	RenameConfig(context.Context, *RenameConfig_Request) (*RenameConfig_Response, error)
	SubscribeOnChanges(MatreshkaBeAPI_SubscribeOnChangesServer) error
	mustEmbedUnimplementedMatreshkaBeAPIServer()
}

// UnimplementedMatreshkaBeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedMatreshkaBeAPIServer struct {
}

func (UnimplementedMatreshkaBeAPIServer) ApiVersion(context.Context, *ApiVersion_Request) (*ApiVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiVersion not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) GetConfig(context.Context, *GetConfig_Request) (*GetConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) GetConfigNodes(context.Context, *GetConfigNode_Request) (*GetConfigNode_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigNodes not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) ListConfigs(context.Context, *ListConfigs_Request) (*ListConfigs_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) CreateConfig(context.Context, *CreateConfig_Request) (*CreateConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) PatchConfig(context.Context, *PatchConfig_Request) (*PatchConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchConfig not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) RenameConfig(context.Context, *RenameConfig_Request) (*RenameConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameConfig not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) SubscribeOnChanges(MatreshkaBeAPI_SubscribeOnChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnChanges not implemented")
}
func (UnimplementedMatreshkaBeAPIServer) mustEmbedUnimplementedMatreshkaBeAPIServer() {}

// UnsafeMatreshkaBeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatreshkaBeAPIServer will
// result in compilation errors.
type UnsafeMatreshkaBeAPIServer interface {
	mustEmbedUnimplementedMatreshkaBeAPIServer()
}

func RegisterMatreshkaBeAPIServer(s grpc.ServiceRegistrar, srv MatreshkaBeAPIServer) {
	s.RegisterService(&MatreshkaBeAPI_ServiceDesc, srv)
}

func _MatreshkaBeAPI_ApiVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).ApiVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_ApiVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).ApiVersion(ctx, req.(*ApiVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).GetConfig(ctx, req.(*GetConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_GetConfigNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigNode_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).GetConfigNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_GetConfigNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).GetConfigNodes(ctx, req.(*GetConfigNode_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigs_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).ListConfigs(ctx, req.(*ListConfigs_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).CreateConfig(ctx, req.(*CreateConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_PatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).PatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_PatchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).PatchConfig(ctx, req.(*PatchConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_RenameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatreshkaBeAPIServer).RenameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatreshkaBeAPI_RenameConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatreshkaBeAPIServer).RenameConfig(ctx, req.(*RenameConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatreshkaBeAPI_SubscribeOnChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatreshkaBeAPIServer).SubscribeOnChanges(&matreshkaBeAPISubscribeOnChangesServer{stream})
}

type MatreshkaBeAPI_SubscribeOnChangesServer interface {
	Send(*SubscribeOnChanges_Response) error
	Recv() (*SubscribeOnChanges_Request, error)
	grpc.ServerStream
}

type matreshkaBeAPISubscribeOnChangesServer struct {
	grpc.ServerStream
}

func (x *matreshkaBeAPISubscribeOnChangesServer) Send(m *SubscribeOnChanges_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matreshkaBeAPISubscribeOnChangesServer) Recv() (*SubscribeOnChanges_Request, error) {
	m := new(SubscribeOnChanges_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatreshkaBeAPI_ServiceDesc is the grpc.ServiceDesc for MatreshkaBeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatreshkaBeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matreshka_be_api.MatreshkaBeAPI",
	HandlerType: (*MatreshkaBeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiVersion",
			Handler:    _MatreshkaBeAPI_ApiVersion_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _MatreshkaBeAPI_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigNodes",
			Handler:    _MatreshkaBeAPI_GetConfigNodes_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _MatreshkaBeAPI_ListConfigs_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _MatreshkaBeAPI_CreateConfig_Handler,
		},
		{
			MethodName: "PatchConfig",
			Handler:    _MatreshkaBeAPI_PatchConfig_Handler,
		},
		{
			MethodName: "RenameConfig",
			Handler:    _MatreshkaBeAPI_RenameConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnChanges",
			Handler:       _MatreshkaBeAPI_SubscribeOnChanges_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/grpc/matreshka-be_api.proto",
}
