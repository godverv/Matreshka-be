syntax = "proto3";

package matreshka_be_api;

import "google/api/annotations.proto";

option go_package = "/matreshka_be_api";

service MatreshkaBeAPI {
  rpc ApiVersion(ApiVersion.Request) returns (ApiVersion.Response) {
    option (google.api.http) = {
      get: "/api/version"
    };
  };

  rpc GetConfig(GetConfig.Request) returns (GetConfig.Response) {
    option (google.api.http) = {
      get: "/api/config/{service_name}",
    };
  }
  rpc GetConfigNodes(GetConfigNode.Request) returns (GetConfigNode.Response) {
    option (google.api.http) = {
      get: "/api/config/nodes/{service_name}",
    };
  }
  rpc ListConfigs(ListConfigs.Request) returns (ListConfigs.Response) {
    option (google.api.http) = {
      post: "/api/config/list",
      body: "*"
    };
  }

  rpc CreateConfig(CreateConfig.Request) returns (CreateConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/create/{service_name}",
      body: "*"
    };
  }
  rpc PatchConfig(PatchConfig.Request) returns (PatchConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/patch/{service_name}",
      body: "*"
    };
  }
}

message AppInfo {
  string name = 1;
  string version = 2;
}

message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}

message ApiVersion {
  message Request {}
  message Response {
    string version = 1;
  }
}

message GetConfig {
  message Request {
    string service_name = 1;
  }

  message Response {
    bytes config = 1;
  }
}

message CreateConfig {
  message Request {
    string service_name = 1;
  }

  message Response {}
}

message PatchConfig {
  message Request {
    string service_name = 1;
    repeated Node changes = 2;
  }

  message Response {}
}

message ListConfigs {
  message Request {
    ListRequest list_request = 1;
    string search_pattern = 2;
  }

  message Response {
    repeated AppInfo services = 1;
  }
}

message Node {
  string name = 1;
  optional string value = 2;
  repeated Node inner_nodes = 3;
}

message GetConfigNode {
  message Request {
    string service_name = 1;
  }

  message Response {
    Node root = 1;
  }
}